// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace CsBindgen
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = "ZenEngine";



        /// <summary>
        ///  Create a new ZenEngine instance, caller is responsible for freeing the returned reference
        ///  by calling zen_engine_free.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_engine_new", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenEngineStruct* zen_engine_new();

        /// <summary>
        ///  Frees the ZenEngine instance reference from the memory
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_engine_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void zen_engine_free(ZenEngineStruct* engine);

        /// <summary>
        ///  Creates a Decision using a reference of DecisionEngine and content (JSON)
        ///  Caller is responsible for freeing content and ZenResult.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_engine_create_decision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_engine_create_decision(ZenEngineStruct* engine, byte* content);

        /// <summary>
        ///  Evaluates rules engine using a DecisionEngine reference via loader
        ///  Caller is responsible for freeing: key, context and ZenResult.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_engine_evaluate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_engine_evaluate(ZenEngineStruct* engine, byte* key, byte* context, ZenEngineEvaluationOptions options);

        /// <summary>
        ///  Loads a Decision through DecisionEngine
        ///  Caller is responsible for freeing: key and ZenResult.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_engine_get_decision", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_engine_get_decision(ZenEngineStruct* engine, byte* key);

        /// <summary>
        ///  Frees ZenDecision
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_decision_free", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void zen_decision_free(ZenDecisionStruct* decision);

        /// <summary>
        ///  Evaluates ZenDecision
        ///  Caller is responsible for freeing context and ZenResult.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_decision_evaluate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_decision_evaluate(ZenDecisionStruct* decision, byte* context_ptr, ZenEngineEvaluationOptions options);

        /// <summary>
        ///  Creates a new ZenEngine instance with loader, caller is responsible for freeing the returned reference
        ///  by calling zen_engine_free.
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_engine_new_native", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenEngineStruct* zen_engine_new_native(delegate* unmanaged[Cdecl]<byte*, ZenDecisionLoaderResult> loader_callback, delegate* unmanaged[Cdecl]<byte*, ZenCustomNodeResult> custom_node_callback);

        [DllImport(__DllName, EntryPoint = "zen_evaluate_expression", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_evaluate_expression(byte* expression, byte* context);

        /// <summary>
        ///  Evaluate unary expression, responsible for freeing expression and context
        ///  True = 1
        ///  False = 0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_evaluate_unary_expression", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_evaluate_unary_expression(byte* expression, byte* context);

        /// <summary>
        ///  Evaluate unary expression, responsible for freeing expression and context
        ///  True = 1
        ///  False = 0
        /// </summary>
        [DllImport(__DllName, EntryPoint = "zen_evaluate_template", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern ZenResult zen_evaluate_template(byte* template, byte* context);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ZenEngineStruct
    {
        public fixed byte _data[1];
        public PhantomData _marker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ZenEngineEvaluationOptions
    {
        [MarshalAs(UnmanagedType.U1)] public bool trace;
        public byte max_depth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ZenResult
    {
        public T* result;
        public byte error;
        public byte* details;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ZenDecisionStruct
    {
        public fixed byte _data[1];
        public PhantomData _marker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct ZenCustomNodeResult
    {
        public byte* content;
        public byte* error;
    }



}
